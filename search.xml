<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>动态壁纸之桌面图标后窗口创建方式</title>
    <url>/2020/05/26/2020-5-26-wallpaper_motion_wnd/</url>
    <content><![CDATA[<img src="http://qavfvrg5v.bkt.clouddn.com/20200526233208.png" style="zoom:200%;" />

<blockquote>
<p>动态壁纸顾名思义就是一个桌面背景在播放视频的软件，要做这个产品首先要解决怎么在桌面图标后面和桌面背景之间创建一个窗口来播放视频，并且要兼容目前市面上的桌面整理软件，下面介绍下研究过程。</p>
</blockquote>
<a id="more"></a>
<p>要说明这个问题，首先简单介绍下windows的窗口句柄相关的内容<br>把spy++运行起来，如下发现了一个由我们的系统的窗口句柄组成的树形结构：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194003.png"  style="zoom:90%" align=center></p>
<p>最顶层的Desktop代表我们的整个桌面系统，系统的其他窗口都属于他的子窗口，兄弟窗口间靠上的窗口覆盖靠下面的窗口，最底层的Progman窗口就是我们的系统桌面，桌面图标窗口是一个List控件由SHELLDLL_DefView窗口承载，如下图：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194153.png"  style="zoom:60%"></p>
<p>开启桌面整理软件后，桌面窗口变成如下方式：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194237.png"  style="zoom:60%"></p>
<p>腾讯的桌面整理的窗口是作为Progman的子窗口插入在桌面图标窗口之上来实现常见的桌面格子功能，这些格子其实也是 “桌面整理”TxMiniSkin 窗口的子窗口，这里是一个虚窗口，所以在spy++里面是看不到的。</p>
<p>那么，我们要做一个视频桌面的话，很容易能够想到的方法就是把我们的视频窗口句柄作为桌面的子窗口然后把他放在SHELLDLL_DefView的下面的一个兄弟节点，就能实现如下示意图:<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194336.png"  style="zoom:40%" align=center></p>
<p>思路大致有了，我们来看看市面上比较流行的动态壁纸产品（火萤桌面、WallPaperEngine）他们是怎么实现视频桌面的</p>
<p>火萤的视频桌面如下<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194621.png"  style="zoom:60%"></p>
<p>WallPaperEngine的视频桌面如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194655.png"  style="zoom:60%"></p>
<p>发现他们有一个共性：他们的桌面图标窗口和桌面窗口分离了，桌面图标窗口放到了一个WorkerW的窗口下面，然后中间也多出来一个WorkerW窗口，并且从窗口层级来看，满足我之前的思路，把视频窗口放到SHELLDLL_DefView的下面。火萤的做法是把视频窗口放到了Progman桌面窗口下，然后隐藏中间的WorkerW窗口，目的是防止这个窗口挡住视频窗口的显示；WallPaperEngine的做法是直接在中间的WorkerW窗口下放他的视频窗口。两种方式在原理上都能满足视频桌面的需求。</p>
<p>现在问题来了，他们是怎么把桌面图标窗口分出来，并且创建了两个WorkerW窗口，其中上层窗口用来承载桌面图标窗口？</p>
<p>根据经验，我猜测他们应该调用了一个系统提供的函数或者发了一个什么消息之类的，要不然不会这么整齐的出现WorkerW窗口类名。看来需要做一次简单的逆向，来找出他们是怎么做的。</p>
<p>关键线索应该就是找Progman这个窗口了，用IDA打开火萤的HYVideoDesktopCore.exe，找关键函数如：FindWindow、FindWindowEx、EnumWindow之类的，看看有没有查找Progman的地方<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194902.png"  style="zoom:40%"><br>寻找交叉引用<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194928.png"  style="zoom:40%"><br>看到了关的Progman窗口，发现他公用了一个ClassName，然后我们再看看都有哪些地方引用到了<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526194954.png"  style="zoom:40%"><br>发现就两个地方<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526195016.png"  style="zoom:40%"><br>第一个就是我们刚刚找到的那个函数，我们再看看第二个交叉引用的地方<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526195039.png"  style="zoom:40%"></p>
<p>从汇编来看，火萤是对Progman窗口调用SendMessageTimeOut消息，根据之前的经验，我们可以对windows的很多关键句柄发送一些特殊的消息来达到一些特殊的目的，还原下这段代码，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">::SendMessageTimeout(hProgman, <span class="number">0x052C</span>, <span class="number">0</span>, <span class="number">0</span>, SMTO_NORMAL, <span class="number">1000</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<p>0x052c是Windows定义了一个特殊的消息，我们这里无法知晓他的作用，忍不住想尝试下他的作用，于是我写了一段代码模拟了一下<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526195204.png"  style="zoom:40%"><br>运行后，用spy++看下结果，果然这个消息是用来分离桌面图标句柄和桌面窗口的消息，看来非常接近我们的目标了。<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526195241.png"  style="zoom:40%"></p>
<p>既然存在分离的消息，那么肯定有还原的消息，经过多次试验，发现上面那个消息传递WParam和LParam值的时候可以达到我们的目标，还原的消息如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200526195310.png"  style="zoom:40%"></p>
<p>于是乎，我们就得到了怎么做视频桌面的第一步：分离桌面和桌面图标窗口<br>接下来的事情就是怎么做一个播放器了，关于视频播放器的内容我后面再做分享，大概用到了DirectShow和Media Foundation两种架构的视频播放器实现，敬请期待<del>~</del></p>
]]></content>
      <categories>
        <category>逆向</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>动态壁纸</tag>
        <tag>spy++</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>用Windbg和Process Monitor解决一个项目中的实际问题</title>
    <url>/2020/05/27/2020-5-27-Procmon-Windbg-win10-taskbar/</url>
    <content><![CDATA[<p><img src="http://qavfvrg5v.bkt.clouddn.com/20200527220410.png" alt=""></p>
<blockquote>
<p>大家都知道Win10系统新增了Cortana和Taskview任务栏图标，这两个新功能能够方便我们的日常工作，但是有些人还是不太习惯任务栏有这两个入口的存在，通常他们会通过任务栏右键菜单来选择是否开启这些功能入口。<br>像腾讯电脑管家和360安全卫士都有Win10助手类软件，可以一键设置这些功能入口。那么，他们是怎么做到系统的开关效果的呢？如果这些类似的需求给到你，你会用什么样的方式来实现这些功能呢？本文就介绍用Procmon和Windbg对系统进行简单逆向的方式来揭示这些功能背后的实现方式。</p>
</blockquote>
<a id="more"></a>

<p>下面我们来看系统中的设置效果是怎么样的<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221114.png" alt=""></p>
<p>这是win10的任务栏，我们可以在任务栏上右键选择cortana和taskview的显示状态<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221149.png" style="zoom: 45%;" /></p>
<p><strong>通过右键弹出菜单设置后，系统能够做到任务栏无闪烁变化，我们的目的就是这个</strong></p>
<p>既然目标明确了，下面就是要解决的问题：</p>
<blockquote>
<p><strong><em>1.系统的状态信息存放在哪里？</em></strong></p>
</blockquote>
<blockquote>
<p><strong><em>2.如何做到无闪烁的？（刷新？or调用个什么api啥的）</em></strong></p>
</blockquote>
<p><strong>针对第一个问题</strong>，我先猜测应该是存放到注册表中的，那么我们可以利用process monitor来抓抓看，设置好filter，进程名是explorer.exe，operator抓RegSetValue，如下<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221312.png" style="zoom: 33%;" /></p>
<p>监控开始，我们尝试隐藏下taskview，看下能抓到什么<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221349.png" style="zoom: 40%;" /></p>
<p>果然，抓到一条有点像的注册表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\ShowTaskViewButton</span><br></pre></td></tr></table></figure>
<p>多做几次操作，我们大概了解了，这个值的0代表隐藏，1代表显示</p>
<p>后面我们手动修改下，然后重启下explorer.exe，果然这个就是系统保存设置的地方，这样第一个问题解决了，后面也可以用同样的方式抓到cortana的值是怎么保存的，读者可以自己试验</p>
<p>接下来我们解决<strong>第二个问题，怎么无闪烁的改变显示状态</strong></p>
<p>第一个想到的是SHChangeNotify函数，这个函数一般可以解决刷新问题，但是在任务栏是否也能刷新到呢？试验的结果是，只能刷新到桌面</p>
<p>第一条路行不通，那会不会是发送消息呢？先上网查查有没有这方面的资料。无果，看来win10这方面的资料还不是很多，没办法，只能自己去挖了</p>
<p>上神器windbg，找了一个32位的win10</p>
<p>记得解决第一个疑问的时候的procmon吗？它有个很好用的功能是可以看栈回溯，在它写关键注册表的位置，双击下，看看栈<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221805.png" style="zoom: 40%;" /></p>
<p>别忘了，他还可以设置符号，如下，options-&gt;configure symbols…<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221835.png" style="zoom:50%;" /></p>
<p>找到explorer模块中准备设置注册表的位置<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221858.png" style="zoom:50%;" /></p>
<p><strong>它的地址是0xb4d5f3</strong></p>
<p>下面我们用windbg attach到explorer.exe进程，找到这个位置断点下来<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527221935.png" style="zoom:40%;" /></p>
<p>我们前面猜测是发送的消息，那么我们就下断点<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222001.png" style="zoom:60%;" /></p>
<p>现在有两个断点，一个是开始写注册表的时候，一个是发送通知消息的时候<br>那么，我们恢复运行，重新触发下taskview的显示状态，这个时候windbg断下来了<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222048.png" style="zoom:40%;" /></p>
<p>输入g，让他继续运行，这个时候断点触发，断在了SendNotifyMessage那里，说明我们的猜测是正确的，接下来就看SendNotifyMessage里面都传了哪些内容<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222118.png" style="zoom:40%;" /></p>
<p>栈回溯大概是这样子<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222145.png" style="zoom:40%;" /></p>
<p>SendNotifyMessage的定义是这样的<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222208.png" style="zoom:40%;" /></p>
<p>那么，我们可以看到这里是怎么传递参数的<br>HWND hWnd是第一个参数，这里是0xffff，查下msdn也就是HWND_BROADCAST<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222240.png" style="zoom:50%;" /></p>
<p>UINT msg是第二个参数，这里是0x1a，可以在WinUser.h中查到他的定义<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222309.png" style="zoom:50%;" /></p>
<img src="http://qavfvrg5v.bkt.clouddn.com/20200527222329.png" style="zoom:50%;" />

<p>WPARAM wParam第三个参数，这里是0<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222353.png" style="zoom:50%;" /></p>
<p>LPARAM lParam第四个参数，这里是0x001c7ddc ，还不确定它具体代表什么<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222418.png" style="zoom:50%;" /></p>
<p>后面du下这个地址，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222443.png" style="zoom:50%;" /></p>
<p><strong>经过上面的分析，我们大概知道的这个消息是怎么发送的，把他用代码表示可以这样写：</strong><br><strong>试验后，发现这样就可以达到系统的效果–做到了任务栏的无闪烁刷新</strong><br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527222510.png" style="zoom:50%;" /></p>
<p>小结：procmon和Windbg结合发现可以解决很多有意思的问题，大家感兴趣的话也可以尝试一下</p>
]]></content>
      <categories>
        <category>逆向</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Windows</tag>
        <tag>Procmon</tag>
        <tag>Windbg</tag>
      </tags>
  </entry>
  <entry>
    <title>黑盒分析360设置助手自动登陆功能的实现方法</title>
    <url>/2020/05/27/2020-5-27-analyze-auto-login/</url>
    <content><![CDATA[<img src="http://qavfvrg5v.bkt.clouddn.com/20200527231844.png" style="zoom:200%;" />

<blockquote>
<p>最近在看一些有意思的技术点，发现360的Win10优化助手里面有个Windows自动登录的设置开关，想着自己做的话要怎么实现出来。调研后发现这个功能其实很简单，就是用系统自带的netplwiz进程做点事情，但是针对小白用户，需要把操作过程简单化最好是一键化，直接让用户只输入下登陆密码就能开启这个功能。下面，就来聊一聊怎么通过黑盒分析的手法把这个功能的实现。</p>
</blockquote>
<a id="more"></a>

<h3 id="一、什么叫自动登陆"><a href="#一、什么叫自动登陆" class="headerlink" title="一、什么叫自动登陆"></a>一、什么叫自动登陆</h3><p>windows自带的系统组件里面有个netplwiz.exe的可执行程序，通过他的设置能够让用户在启动电脑的时候不用输入密码自动登陆进入系统（当然是在设置有密码的情况），如下图所示：</p>
<figure class="half">
    <img src="http://qavfvrg5v.bkt.clouddn.com/20200527232340.png" style="zoom:50%;">
    <img src="http://qavfvrg5v.bkt.clouddn.com/20200527232430.png" style="zoom:50%;">
</figure>

<p>我们只要对去掉上面的复选框然后选择应用的用户，输入正确的密码后，以后就能不输入密码进入桌面了，想着就挺方便的。可是，如果我们的功能入口只是单纯的拉起这个进程，一般的用户还是挺懵逼的，那就看看能否直接免去用户的操作，只要用户输入密码就OK了的方法。</p>
<h3 id="二、看看360的实现方式"><a href="#二、看看360的实现方式" class="headerlink" title="二、看看360的实现方式"></a>二、看看360的实现方式</h3><p>360优化助手软件的自动登陆功能如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527232616.png" style="zoom:40%;" /></p>
<p>点击进去后的效果正好是我们需要的，直接拉起netplwiz.exe进程后，把自动登陆输入密码的界面拉起来，这样用户就能比较容易的操作了。</p>
<p><strong><em>看到这里，我们可能会考虑他们是怎么实现的？</em></strong></p>
<p><strong>1.难道是系统提供了接口，或者传递个命令行就能拉起自动登陆框？</strong><br>用procexp查下命令行，如下图，没用什么特殊的<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527232721.png" style="zoom:40%;" /></p>
<p><strong>2.又或者360在拉起netplwiz进程后给这个窗口发了什么消息？</strong><br>但是发什么消息不太好从表面上看出来，<strong><em>不过有一点比较特殊，360在拉起自动登陆的密码框后，如果密码输入完成后，netplwiz的两个窗口（用户账户和自动登陆窗口）会同时消失（如果是正常使用是不会同时关闭窗口）；如果在没输入密码的时候，360的设置助手软件是不可操作的。</em></strong>那么就可以猜测，360在拉起用户账户窗口后，给这个窗口sendmessage了，导致界面挂起在等待message处理返回的地方，可以看看下图：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527232921.png" style="zoom:40%;" /></p>
<p>猜测下他们的实现可能是这样的：<strong><em>拉起netplwiz进程-&gt;找到用户账户的复选框发送去勾的消息-&gt;发送选择用户名的消息-&gt;发送应用点击按钮的消息-&gt;拉起自动登陆密码框后-&gt;发送消息填入用户名</em></strong></p>
<p>下面的思路应该就比较顺了，用windbg断点createprocess后，看sendmessage是怎么发送的消息。</p>
<h3 id="三、用windbg进行黑盒分析"><a href="#三、用windbg进行黑盒分析" class="headerlink" title="三、用windbg进行黑盒分析"></a>三、用windbg进行黑盒分析</h3><p>1.打开windbg调试器，attach到360win10set.exe进程（至于怎么能够顺利的attach到360的进程就不说 了）</p>
<p>2.这个功能首先得拉起netplwiz.exe进程，那么一切的起点就是在CreateProcess处设置断点<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233107.png" style="zoom:50%;" /></p>
<p>3.然后，看看他们是怎么发送消息的，就要在SendMessage处设置断点，不过这里有点要注意，因为很多地方会用到sendmessage，在没用在CreateProcess断下来之前，先把这个断点diable一下<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233155.png" style="zoom:50%;" /></p>
<p>4.GO起来，然后使用360的自动登陆，很快就在CreateProcess处断下来后，启用SendMessage断点，继续运行，后面会在SendMessage处断下来，等界面起来后看看SendMessage处的参数：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233223.png" style="zoom:50%;" /></p>
<p>都知道SendMessage的参数定义是这样的：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233245.png" style="zoom:50%;" /></p>
<p>这里的hWnd是0x0007095e，我们用spy++抓下窗口的信息，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233318.png" style="zoom:50%;" /></p>
<p>貌似和这个值没关系，那么我们继续运行看看是什么样子的，go一下<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233340.png" style="zoom:50%;" /></p>
<p>继续go下，发现了重要信息，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233402.png" style="zoom:50%;" /></p>
<p>这次的句柄值0x00030ed0不刚好就是复选框的句柄值么<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233425.png" style="zoom:50%;" /></p>
<p>继续看看栈，有个调用很有意思，CheckDlgButton</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00daea94 0f5d434d 00030ec6 000003fe 00000000 USER32!CheckDlgButton+0x24</span><br></pre></td></tr></table></figure>

<p>查下msdn，发现他正好是给复选框设置勾选状态的函数<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233541.png" style="zoom:50%;" /></p>
<p><strong>那么我们这里就得到第一个有价值的信息：通过CheckDlgButton把复选勾去掉</strong></p>
<p>5.找到去勾的方法后，继续go，发现界面的上的勾确实去掉，这时候继续断在了SendMessage处<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233627.png" style="zoom:50%;" /></p>
<p>看了下句柄值，发现是给“用户”tab发送消息，msg是0x111，也就是WM_COMMAND消息</p>
<p>看看整体的4个参数，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233655.png" style="zoom:50%;" /></p>
<p>对于wparam这个参数，暂时不太理解是什么意思，暂且记录下来：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SendMessage（用户tab句柄,WM_COMMAND,<span class="number">0x3fe</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>6.继续GO，过程如上，看看栈<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233746.png" style="zoom:50%;" /></p>
<p><strong>0x000e0950</strong>这个句柄值是“用户账户”那个整个窗口的句柄值，msg也是WM_COMMAND，看下四个参数值：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233836.png" style="zoom:50%;" /></p>
<p>同样的，不知道wparam是个什么意思，暂且记录下来：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SendMessage（用户账户句柄,WM_COMMAND,<span class="number">0x3021</span>,<span class="number">0</span>）</span><br></pre></td></tr></table></figure>

<p>7.继续GO，发现这个时候自动登陆的界面已经出来了，所以可以肯定，上面的SendMessage是可以把界面拉起来，也就是说，那个wparam很可能是代表点击应用按钮。既然出现了登陆框，那么再看看spy++里面的信息，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233921.png" style="zoom:40%;" /></p>
<p>这个时候，windbg还是断在了sendmessage处，那么我们看看栈信息：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527233943.png" style="zoom:50%;" /></p>
<p>这里有两点不一样：<br><strong><em>1) 线程号变了，也就是说在唤起自动登陆界面后开了一个线程处理里面的逻辑</em></strong></p>
<p><strong><em>2) 句柄0x00110f7e，从spy++可以知道他就是输入用户名的地方，msg为0xb1，可以知道这个消息是EM_SETSEL，也就是edit选择的消息</em></strong></p>
<p>看看完整的4个参数，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234028.png" style="zoom:50%;" /></p>
<p>好，这里可以明确了，是发送用户名焦点选择的消息，记录下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SendMessage（用户名句柄,EM_SETSEL,<span class="number">0</span>,<span class="number">-1</span>）</span><br></pre></td></tr></table></figure>

<p>8.继续GO，同样在SendMessage处断下，看看栈信息<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234108.png" style="zoom:50%;" /></p>
<p>同样的句柄值，msg是0x303，也就是WM_CLEAR消息，那么很肯定是清理edit控件的消息，看看四个参数，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234144.png" style="zoom:50%;" /></p>
<p>记录下，清理控件内容的消息：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SendMessage（用户名句柄,WM_CLEAR,<span class="number">0</span>,<span class="number">0</span>）</span><br></pre></td></tr></table></figure>

<p>9.下面，一般人都猜到了，下一个消息肯定是设置内容的消息，那么我们继续GO下，看看栈内容：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234233.png" style="zoom:50%;" /></p>
<p>在贴这个截图的时候，发现粘贴不出来，可以想到这里肯定是360把COPYDATA给占用了，目的是0x302这个消息就是设置内容的WM_PASTE消息，那么我们看看四个参数，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234300.png" style="zoom:50%;" /></p>
<p>记录下，内容粘贴的消息：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SendMessage（用户名句柄,WM_PASTE,<span class="number">0</span>,<span class="number">0</span>）</span><br></pre></td></tr></table></figure>

<p>10.继续GO，发现控制交回给360的设置助手<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234336.png" style="zoom:50%;" /></p>
<p>综合上面的分析过程，我们大概了解了这个功能是怎么实现的，不过你们可以会有点疑问，这个过程的几个关键句柄是怎么拿到的呢？</p>
<p>好，我们看看有哪几个关键句柄：</p>
<p>1）用户账户对话框的句柄</p>
<p>2）用户tab的句柄</p>
<p>3）复选框的句柄</p>
<p>4）自动登陆框的句柄</p>
<p>5）自动登陆框用户名edit框的句柄</p>
<p>11.看来还要有这一点才能完整的解决问题</p>
<p>关键句柄就是，最外面的对话框句柄的获取，显然我们可以用CreateProcess后拿到pid，然后通过GetWindowThreadProcessId可以拿到这个句柄，是不是很容易？</p>
<p>那么接下来的几个句柄呢？</p>
<p>我们再来回顾一个图，也就是spy++抓出来的图，如下：<br><img src="http://qavfvrg5v.bkt.clouddn.com/20200527234518.png" style="zoom:40%;" /></p>
<p>其实windows的句柄是一个树形结构，最顶层的句柄就是我们的桌面句柄，然后里面有几个窗口就有几个节点，如果一个窗口在另一个窗口的上面，那么他的句柄节点就在他所覆盖的句柄的上面节点处，看看上图，由于用户账户界面是很快创建出自动登陆界面，那么自动登陆界面就在他的上面相邻出；说完了同级，在来看看子句柄，树形结构里面，如果控件在一个窗体内部，那么这个控件就是这个父句柄的子句柄，看上面是不是很形象。</p>
<p>那么剩下的4个句柄就很容易拿到了，无非就是GetTopWindow、GetWindow、GetNextWindow之类的API遍历下就能拿到了。</p>
<p><strong>前面的几个步骤通过黑盒的方式分析出了360优化助手自动登录的实现过程，接下来可以比较容易的写出一个简单的Demo来模拟这一功能了，大家有兴趣的可以试一试</strong></p>
]]></content>
      <categories>
        <category>逆向</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Windbg</tag>
        <tag>黑盒分析</tag>
        <tag>调试</tag>
      </tags>
  </entry>
</search>
